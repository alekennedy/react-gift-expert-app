{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifts.js","components/GifGripItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","categorias","type","value","onChange","target","propType","PropTypes","func","isRequired","getGif","category","a","baseUrl","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGripItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","item","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACI,mCACA,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAST,EACTU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,eAwB/BZ,EAAYe,SAAW,CACnBd,cAAee,IAAUC,KAAKC,Y,4BC9BrBC,EAAM,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACdC,EADc,mGACyFC,UAAUH,IADnG,SAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAKH,EAAII,OAAOC,iBAAiBF,QATvB,kBAYXL,GAZW,4CAAH,sDCENQ,G,KAAc,SAAC,GAAW,IAAVN,EAAS,EAATA,IACzB,OACI,sBAAKO,UAAU,2CAAf,UACI,qBAAKC,IAAKR,EAAIG,IAAKM,IAAKT,EAAIE,QAC5B,4BAAIF,EAAIE,aCDPQ,EAAU,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SACrB,ECJwB,SAACA,GACzB,MAA0BlB,mBAAS,CAC/ByB,KAAM,GACNc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACNzB,EAAOC,GAAUyB,MAAK,SAACC,GACnBH,EAAS,CACLhB,KAAKmB,EACLL,SAAQ,SAIhB,CAACrB,IAGEsB,EDbwBK,CAAa3B,GAArCqB,EAAP,EAAOA,QAAcP,EAArB,EAAgBP,KAChB,OACI,qCACI,6BAAKP,IACJqB,GAAW,mBAAGJ,UAAU,kCAAb,yBACZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOL,KAAI,SAAAmB,GACP,OAAO,cAAC,EAAD,CAA2BlB,IAAKkB,GAAdA,EAAKjB,aEgBvCkB,EA1BM,WAEjB,MAAoC/C,mBAAS,IAA7C,mBAAOgD,EAAP,KAAmBjD,EAAnB,KAEA,OACG,qCACK,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAkBA,IAE3B,6BAEQiD,EAAWrB,KAAI,SAAAT,GACX,OAAO,cAAC,EAAD,CAEHA,SAAYA,GADLA,Y,MCbvC+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4c0c2228.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types';\nexport const CategoryAdd = ({setCategories}) => {\n    const [inputValue, setinputValue] = useState('');\n    const handleInputChange = (e)=>{\n        setinputValue(e.target.value);\n    };\n    const handleSubmit = (e)=>{\n        e.preventDefault();\n        if(inputValue.trim().length > 2){\n            setCategories( categorias => [inputValue, ...categorias]);\n            setinputValue('');\n        }\n        \n    };\n    return (\n        <>\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\" \n                value = {inputValue}\n                onChange = {handleInputChange}\n            >\n                \n            </input>\n            </form>\n        </>\n    )\n}\nCategoryAdd.propType = {\n    setCategories: PropTypes.func.isRequired\n};\n","export const getGif = async(category)=> {\n    let baseUrl = `https://api.giphy.com/v1/gifs/search?api_key=ktkUOIC31BfR1Ecdene72D1wHDcG85NB&limit=10&q=${ encodeURI(category) }`;\n    const resp = await fetch(baseUrl);\n    const {data} = await resp.json();\n    \n    const gifs = data.map( img =>{\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        };\n    });\n    return gifs;\n};","import React from 'react'\nimport 'animate.css';\nexport const GifGripItem = ({img}) => {\n    return (\n        <div className='card animate__animate animate__bounceOut'>\n            <img src={img.url} alt={img.title}></img>\n            <p>{img.title}</p>\n        </div>\n    )\n}\n","import React from 'react'\n\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGripItem } from './GifGripItem';\nimport 'animate.css';\nexport const GifGrid = ({category}) => {\n    const {loading, data:images} = useFetchGifs(category);\n    return (\n        <>\n            <h3>{category}</h3>\n            {loading && <p className='animate__animate animate__flash'>Cargando...</p>}\n            <div className='card-grid'>\n                {\n                    images.map(item =>{\n                        return <GifGripItem key={item.id} img={item}></GifGripItem>\n                    })\n                \n                }\n            </div>\n        </>\n        \n     )\n}\n","import { useState, useEffect } from \"react\";\nimport { getGif } from \"../helpers/getGifts\";\nexport const useFetchGifs = (category)=>{\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n    \n    useEffect(()=>{\n        getGif(category).then((imgs)=>{\n            setState({\n                data:imgs, \n                loading:false\n            });\n        });\n    },\n        [category]\n    )\n    \n    return state;\n};","import React, {useState} from 'react';\nimport { CategoryAdd } from './CategoryAdd';\nimport { GifGrid } from './GifGrid';\n\nconst GifExpertApp = ()=>{\n     //const categorias = ['BMW','AUDI','MERCEDES BENZ'];\n    const [categories, setCategories] = useState([]);\n    \n    return (\n       <>\n            <h2>GifExpertApp</h2>  \n            <hr></hr>\n            <CategoryAdd setCategories = { setCategories }/>\n            {\n                <ol>\n                    {\n                        categories.map(category => {\n                            return <GifGrid \n                                key = {category}\n                                category= { category }\n                            />\n                        })\n                    }\n                </ol>\n            }\n            \n       </>\n    )\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}